#Copyright 2017 Reactive Ops Inc.
#
#Licensed under the Apache License, Version 2.0 (the “License”);
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an “AS IS” BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

version: 2.1

executors:
  python-2-7:
    docker:
      - image: circleci/python:2.7
  python-3-6:
    docker:
      - image: circleci/python:3.6
  python-3-7:
    docker:
      - image: circleci/python:3.7
  vm:
    machine:
      enabled: true

jobs:
  build-2-7:
    executor: python-2-7
    working_directory: ~/reckoner
    steps:
      - run:
          name: Setup PATH to support pip user installs
          command: echo 'export PATH=$PATH:/home/circleci/.local/bin' >> $BASH_ENV
      - checkout
      - run:
          name: Unit Tests
          command: |
            pip install --user -r development-requirements.txt
            pip install --user -e .
            reckoner --version
            pytest
  build-3-6:
    executor: python-3-6
    working_directory: ~/reckoner
    steps:
      - run:
          name: Setup PATH to support pip user installs
          command: echo 'export PATH=$PATH:/home/circleci/.local/bin' >> $BASH_ENV
      - checkout
      - run:
          name: Unit Tests
          command: |
            pip install --user -r development-requirements.txt
            pip install --user -e .
            reckoner --version
            pytest
  build-3-7:
    executor: python-3-7
    working_directory: ~/reckoner
    steps:
      - run:
          name: Setup PATH to support pip user installs
          command: echo 'export PATH=$PATH:/home/circleci/.local/bin' >> $BASH_ENV
      - checkout
      - run:
          name: Unit Tests
          command: |
            pip install --user -r development-requirements.txt
            pip install --user -e .
            reckoner --version
            pytest
  release:
    executor: python-3-7
    environment:
      PYPI_USERNAME: ReactiveOps
      GITHUB_ORGANIZATION: $CIRCLE_PROJECT_USERNAME
      GITHUB_REPOSITORY: $CIRCLE_PROJECT_REPONAME
    working_directory: ~/reckoner
    steps:
      - checkout
      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: package and upload
          command: |
            sudo pip install twine
            python setup.py sdist bdist_wheel
            twine upload dist/*
  compile:
    executor: python-3-7
    working_directory: ~/reckoner
    steps:
      - run:
          name: Setup PATH to support pip user installs
          command: echo 'export PATH=$PATH:/home/circleci/.local/bin' >> $BASH_ENV
      - checkout
      - run:
          name: build binary for linux
          command: |
            pip install --user pyinstaller setuptools-scm
            pip install --user .
            cd installer
            python -c 'from setuptools_scm import get_version; get_version(root="..", write_to="reckoner/version.txt")'
            pyinstaller -y -p .:../ -F -n reckoner reckoner.spec
      - run:
          name: persist binaries
          command: |
            sudo mkdir /tmp/binaries/
            sudo cp installer/dist/reckoner /tmp/binaries/
      - persist_to_workspace:
          root: /tmp/binaries
          paths:
            - reckoner
      - store_artifacts:
          path: installer/dist/reckoner
          destination: reckoner_linux_amd64
  end-to-end:
    executor: vm
    working_directory: ~/reckoner
    resource_class: small
    steps:
      - setup_remote_docker
      - checkout
      - attach_workspace:
          at: /tmp/binaries
      - run:
          name: Setup Kube Cluster
          command: |
            wget https://github.com/kubernetes-sigs/kind/releases/download/0.2.1/kind-linux-amd64
            mv kind-linux-amd64 kind
            chmod 0755 kind

            ./kind create cluster --wait=90s

            docker run -d --name kube-access --network container:kind-control-plane gcr.io/kubernetes-charts-ci/test-image:v3.2.0 tail -f /dev/null
            docker exec kube-access mkdir /root/.kube /app/
            docker cp $(./kind get kubeconfig-path --name=kind) kube-access:/root/.kube/config
            docker exec kube-access sed -i 's/localhost:.*/localhost:6443/' /root/.kube/config
            docker exec -it kube-access kubectl version

            docker cp /tmp/binaries/reckoner kube-access:/usr/local/bin/
            docker exec kube-access reckoner version

            docker exec kube-access apk update
            docker exec kube-access apk add jq

            docker exec kube-access kubectl -n kube-system create serviceaccount tiller
            docker exec kube-access kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount kube-system:tiller
            docker exec kube-access helm init --service-account tiller --wait
      - run:
          name: Run Tests
          command: |
            docker exec kube-access reckoner --version
            docker exec -e test_environ_var=testing kube-access reckoner plot /app/reckoner/end_to_end_testing/basic.yml
            docker exec kube-access sh -c "helm list --output json | jq . -C"

            docker exec kube-access sh -c "helm list --output json | jq -e '.Releases[]|select(.Name == \"nginx-ingress\")|.Namespace == \"infra\"'"
            docker exec kube-access sh -c "helm list --output json | jq -e '.Releases[]|select(.Name == \"go-harbor\")|.Namespace == \"test\"'"
            docker exec kube-access sh -c "helm list --output json | jq -e '.Releases[]|select(.Name == \"redis-env\")|.Namespace == \"redis-test-namespace\"'"
            docker exec kube-access sh -c "helm list --output json | jq -e '.Releases[]|select(.Name == \"nginx-ingress\")|.Status == \"DEPLOYED\"'"
            docker exec kube-access sh -c "helm list --output json | jq -e '.Releases[]|select(.Name == \"go-harbor\")|.Status == \"DEPLOYED\"'"
            docker exec kube-access sh -c "helm list --output json | jq -e '.Releases[]|select(.Name == \"redis-env\")|.Status == \"DEPLOYED\"'"
            docker exec kube-access sh -c "helm list --output json | jq -e '[.Releases[].Name] | contains([\"redis-hook\"])|not'"
            docker exec kube-access reckoner plot --only nginx-ingress /app/reckoner/end_to_end_testing/basic.yml
            docker exec kube-access sh -c "helm list --output json | jq -e '.Releases[]|select(.Name == \"nginx-ingress\")|.Revision == 2'"

workflows:
  version: 2
  build:
    jobs:
      # - build-2-7
      # - build-3-6
      # - build-3-7
      - compile
          # requires:
          #   - build-2-7
          #   - build-3-6
          #   - build-3-7
      - end-to-end:
          requires:
            - compile
      # - release:
      #     requires:
      #       - end-to-end
      #     filters:
      #       tags:
      #         only: /.*/
      #       branches:
      #         ignore: /.*/
